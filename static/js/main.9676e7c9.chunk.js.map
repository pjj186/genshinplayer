{"version":3,"sources":["components/GlobalStyles.js","components/common/BackwardButton.js","components/common/ForwardButton.js","components/common/PlayButton.js","components/common/Avatar.js","components/common/SongController.js","components/common/SongTitle.js","components/common/Header.js","components/common/Loader.js","routes/MusicPlay.js","fbase.js","components/Characters/RaidenBox.js","components/Characters/HutaoBox.js","components/Characters/KazuhaBox.js","components/Characters/KleeBox.js","components/Characters/AyakaBox.js","components/Characters/GanyuBox.js","routes/MusicList.js","components/App.js","index.js"],"names":["GlobalStyles","createGlobalStyle","reset","BackwardButtonContainer","styled","div","BackwardButton","videoRef","icon","faBackward","onClick","current","currentTime","ForwardButtonContainer","ForwardButton","faForward","PlayButtonContainer","PlayButton","playMusic","loading","useState","isPlay","setIsPlay","handleEnded","ended","useEffect","video","addEventListener","removeEventListener","prev","pause","faPause","faPlay","AvatarContainer","AvatarImage","Image","img","Avatar","imgSrc","src","alt","SongInfoContainer","SongController","children","Container","SongTitle","Header","Ringanim","keyframes","LdsRing","InLdsRing","props","delay","Loader","Player","BackgroundContainer","bgSrc","ButtonContainer","BackLink","Link","Video","Title","span","VolumeGroup","VolumeBox","input","TimeLineBox","TimeBox","TimeLineGroup","TotalTimeBox","CurrentTimeBox","BottomGroup","MUSIC_LF","MusicPlay","location","LFContext","useContext","AppContext","useRef","volumeRef","totalTime","timelineel","srcValue","setSrcValue","volumeBar","setVolumeBar","timeline","setTimeline","musicLF","imageLF","bgLF","volumeValue","handleVolumeChange","event","value","target","volume","handleTimeUpdate","innerText","timeFormat","Math","floor","seconds","Date","toISOString","substr","getMusicInfo","a","localforage","getItem","then","setDuration","duration","setOriginDuration","setMusicLF","getImageInfo","setImgSrc","setName","name","setImageLF","getBgInfo","setBgSrc","setBgLF","reloadData","keys","res","length","clear","to","faBars","type","step","min","max","originduration","ref","onChange","err","console","log","url","URL","createObjectURL","file","play","faVolumeOff","faVolumeUp","autoPlay","playsInline","muted","storageService","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","getStorage","TextBox","AvatarImg","Icon","RaidenBox","IMAGE_LF","BG_LF","getImgFile","imgRef","getDownloadURL","xhr","XMLHttpRequest","responseType","onload","response","open","send","getBackGround","evnet","getMusicFile","listRef","listAll","list","filename","items","musicRef","getMetadata","meta","getBlobDuration","blob","setItem","pathname","faPlayCircle","HutaoBox","KazuhaBox","KleeBox","AyakaBox","GanyuBox","ListBox","MusicList","React","createContext","App","Provider","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9676e7c9.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\nimport reset from \"styled-reset\";\n\nconst GlobalStyles = createGlobalStyle`\n    ${reset}\n    a {\n        text-decoration: none;\n        color: inherit;\n    }\n    * {\n        box-sizing: border-box;\n        user-select: none;\n    }\n    body {\n        font-family: --apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n    }\n`;\n\nexport default GlobalStyles;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faBackward } from \"@fortawesome/free-solid-svg-icons\";\n\nconst BackwardButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: white;\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  font-size: 18px;\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 1); // 그림자 나중에 수정\n  cursor: pointer;\n`;\n\nconst BackwardButton = ({ videoRef }) => {\n  const handleBackward = () => {\n    videoRef.current.currentTime -= 10;\n  };\n  return (\n    <BackwardButtonContainer>\n      <FontAwesomeIcon icon={faBackward} onClick={handleBackward} />\n    </BackwardButtonContainer>\n  );\n};\n\nexport default BackwardButton;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faForward } from \"@fortawesome/free-solid-svg-icons\";\n\nconst ForwardButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: white;\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  font-size: 18px;\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 1);\n  cursor: pointer;\n`;\n\nconst ForwardButton = ({ videoRef }) => {\n  const handleForward = () => {\n    videoRef.current.currentTime += 10;\n  };\n  return (\n    <ForwardButtonContainer>\n      <FontAwesomeIcon icon={faForward} onClick={handleForward} />\n    </ForwardButtonContainer>\n  );\n};\n\nexport default ForwardButton;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlay, faPause } from \"@fortawesome/free-solid-svg-icons\";\n\nconst PlayButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: white;\n  width: 50px;\n  height: 50px;\n  border-radius: 50%;\n  font-size: 25px;\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 1); // 그림자 나중에 수정\n  cursor: pointer;\n`;\n\nconst PlayButton = ({ playMusic, videoRef, loading }) => {\n  const [isPlay, setIsPlay] = useState(false);\n\n  const handleEnded = () => {\n    if (videoRef.current.ended) setIsPlay(false);\n  };\n\n  useEffect(() => {\n    const video = videoRef.current;\n    if (!loading) {\n      video.addEventListener(\"timeupdate\", handleEnded);\n    }\n    return () => {\n      if (!loading) {\n        video.removeEventListener(\"timeupdate\", handleEnded);\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const onClickPlay = () => {\n    setIsPlay((prev) => !prev);\n    if (!isPlay) {\n      playMusic();\n    }\n    if (isPlay) {\n      videoRef.current.pause();\n    }\n  };\n\n  return (\n    <PlayButtonContainer onClick={onClickPlay}>\n      {isPlay ? (\n        <FontAwesomeIcon icon={faPause} />\n      ) : (\n        <FontAwesomeIcon icon={faPlay} />\n      )}\n    </PlayButtonContainer>\n  );\n};\n\nexport default PlayButton;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst AvatarContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 20px;\n`;\nconst AvatarImage = styled.div`\n  display: flex;\n  background-color: rgba(255, 255, 255, 0.5);\n  width: 200px;\n  height: 200px;\n  align-items: center;\n  justify-content: center;\n  border-radius: 15px;\n`;\n\nconst Image = styled.img`\n  width: 200px;\n  height: 200px;\n  border-radius: 15px;\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.8);\n`;\n\nconst Avatar = ({ imgSrc }) => {\n  return (\n    <AvatarContainer>\n      <AvatarImage>\n        <Image src={imgSrc} alt=\"Avatar\" />\n      </AvatarImage>\n    </AvatarContainer>\n  );\n};\n\nexport default Avatar;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst SongInfoContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  /* background-color: tomato; */\n  width: 100%;\n  height: 220px;\n  position: absolute;\n  bottom: 0;\n  border-radius: 0px 0px 15px 15px;\n`;\n\nconst SongController = ({ children }) => {\n  return <SongInfoContainer>{children}</SongInfoContainer>;\n};\n\nexport default SongController;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  position: absolute;\n  display: flex;\n  width: 100%;\n  height: 60px;\n  /* background-color: green; */\n  bottom: 200px;\n  justify-content: center;\n  align-items: center;\n  color: white;\n  text-shadow: 0.1em 0.1em 0 hsl(400 50% 30%);\n`;\n\nconst SongTitle = ({ children }) => {\n  return <Container>{children}</Container>;\n};\n\nexport default SongTitle;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  display: flex;\n  background-color: rgba(255, 255, 255, 0.5);\n  width: 100%;\n  height: 30px;\n  border-top-left-radius: 15px;\n  border-top-right-radius: 15px;\n  align-items: center;\n`;\n\nconst Header = ({ children }) => {\n  return <Container>{children}</Container>;\n};\n\nexport default Header;\n","import React from \"react\";\nimport styled, { keyframes } from \"styled-components\";\n\nconst Ringanim = keyframes`\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n`;\n\nconst LdsRing = styled.div`\n  display: inline-block;\n  position: relative;\n  width: 80px;\n  height: 80px;\n`;\n\nconst InLdsRing = styled.div`\n  box-sizing: border-box;\n  display: block;\n  position: absolute;\n  width: 64px;\n  height: 64px;\n  margin: 8px;\n  border: 8px solid #6c5ce7;\n  border-radius: 50%;\n  animation: ${Ringanim} 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;\n  animation-delay: ${(props) => props.delay};\n  border-color: #6c5ce7 transparent transparent transparent;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 28px;\n  height: 100%;\n  border-radius: 15px;\n  background: rgb(238, 174, 202);\n  background: linear-gradient(\n    rgba(238, 174, 202, 1) 0%,\n    rgba(148, 187, 233, 1) 100%\n  );\n`;\n\nconst Loader = () => (\n  <Container>\n    <LdsRing>\n      <InLdsRing delay=\"-0.45s\"></InLdsRing>\n      <InLdsRing delay=\"-0.3s\"></InLdsRing>\n      <InLdsRing delay=\"-0.15s\"></InLdsRing>\n    </LdsRing>\n  </Container>\n);\n\nexport default Loader;\n","import React, { useEffect, useState, useRef, useContext } from \"react\";\nimport styled from \"styled-components\";\nimport BackwardButton from \"../components/common/BackwardButton\";\nimport ForwardButton from \"../components/common/ForwardButton\";\nimport PlayButton from \"../components/common/PlayButton\";\nimport Avatar from \"../components/common/Avatar\";\nimport SongController from \"../components/common/SongController\";\nimport SongTitle from \"../components/common/SongTitle\";\nimport { Link } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faBars,\n  faVolumeUp,\n  faVolumeOff,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport localforage from \"localforage\";\nimport Header from \"../components/common/Header\";\nimport Loader from \"../components/common/Loader\";\nimport { AppContext } from \"../components/App\";\n\nconst Container = styled.div`\n  display: flex;\n  height: 100vh;\n  align-items: center;\n`;\n\nconst Player = styled.div`\n  position: relative;\n  margin: 0 auto;\n  /* transform: translateY(50%); */\n  width: 300px;\n  height: 500px;\n  border-radius: 15px;\n  border: 0.5px solid black;\n`;\n\nconst BackgroundContainer = styled.div`\n  position: fixed;\n  width: 300px;\n  height: 500px;\n  background-image: url(${(props) => props.bgSrc});\n  background-repeat: no-repeat;\n  background-size: cover;\n  background-position: center;\n  border-radius: 15px;\n  z-index: -1;\n  filter: blur(2px);\n`;\n\nconst ButtonContainer = styled.div`\n  display: flex;\n  /* background-color: black; */\n  width: 100%;\n  height: 70px;\n  align-items: center;\n  justify-content: space-evenly;\n  padding-top: 25px;\n`;\n\nconst BackLink = styled(Link)`\n  margin-left: 10px;\n  font-size: 20px;\n  color: rgba(255, 255, 255, 0.9);\n`;\n\nconst Video = styled.video`\n  display: none;\n`;\n\nconst Title = styled.span`\n  font-size: 30px;\n  font-weight: 600;\n`;\n\nconst VolumeGroup = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 80px;\n  color: #636e72b4;\n`;\n\n// 볼륨 range\nconst VolumeBox = styled.input`\n  -webkit-appearance: none;\n  width: 70%;\n  margin: 0 5px;\n\n  &:focus {\n    outline: none;\n  }\n  // 포인터\n  &::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    width: 12px;\n    height: 12px;\n    background: white;\n    border-radius: 50%;\n    margin-top: -5px;\n  }\n\n  // 바 스타일\n  &::-webkit-slider-runnable-track {\n    width: 100%;\n    height: 5px;\n    /* box-shadow: 1px 1px 1px #000000, 0px 0px 1px #0d0d0d; */\n    border-radius: 30px;\n    border: 0.2px solid #010101;\n  }\n`;\n\n// 타임라인 range\nconst TimeLineBox = styled.input`\n  -webkit-appearance: none;\n  overflow: hidden;\n  width: 100%;\n  margin: 0 auto;\n  background-color: rgba(255, 255, 255, 0.5);\n\n  &::-webkit-slider-runnable-track {\n    height: 4px;\n    -webkit-appearance: none;\n    color: #13bba4;\n    border: 0.2px solid #010101;\n  }\n\n  &::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    width: 12px;\n    height: 12px;\n    background: #dfe6e9;\n    margin-top: -5px;\n    box-shadow: -100vw 0 0 100vw rgba(255, 255, 255, 0.6);\n    border-radius: 50%;\n  }\n`;\n\nconst TimeBox = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  padding: 0 10px;\n  color: rgba(255, 255, 255, 0.9);\n`;\n\nconst TimeLineGroup = styled.div`\n  width: 100%;\n  height: 80px;\n  margin-top: 10px;\n`;\n\nconst TotalTimeBox = styled.span`\n  font-weight: bold;\n`;\n\nconst CurrentTimeBox = styled.span`\n  font-weight: bold;\n`;\n\nconst BottomGroup = styled.div`\n  width: 100%;\n  background-color: rgba(255, 255, 255, 0.5);\n  border-radius: 0px 0px 15px 15px;\n`;\n\nconst MUSIC_LF = \"currentmusic\";\nconst IMAGE_LF = \"currentimage\";\nconst BG_LF = \"currentbackground\";\n\n// MusicPlay 컴포넌트\nconst MusicPlay = ({ location }) => {\n  const LFContext = useContext(AppContext);\n\n  const videoRef = useRef();\n  const volumeRef = useRef();\n  const currentTime = useRef();\n  const totalTime = useRef();\n  const timelineel = useRef();\n\n  const [srcValue, setSrcValue] = useState(\"\");\n  const [volumeBar, setVolumeBar] = useState(0.5);\n  const [timeline, setTimeline] = useState(0);\n\n  const loading = LFContext.musicLF || LFContext.imageLF || LFContext.bgLF;\n\n  // console.log(localkeys);\n  let volumeValue = volumeBar; // 볼륨 초깃값\n\n  // 재생 페이지에서 새로 고침 시, 다시 데이터를 불러오고, 로딩을 끝내줄 함수가 필요함\n  // duration, originDuration, name, img, bg 정보 다시 불러와야함\n\n  // 음악 재생\n  const playMusic = () => {\n    if (videoRef.current.currentTime === 0) {\n      localforage.getItem(MUSIC_LF, (err, value) => {\n        if (err) {\n          console.log(err);\n        }\n        const url = URL.createObjectURL(value.file); // 파일\n        setSrcValue(url);\n      });\n    } else {\n      videoRef.current.play();\n    }\n    videoRef.current.volume = volumeValue;\n  };\n\n  // 볼륨 컨트롤\n  const handleVolumeChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setVolumeBar(value);\n    volumeValue = value;\n    videoRef.current.volume = value;\n  };\n\n  // 타임라인 업데이트\n  const handleTimeUpdate = () => {\n    currentTime.current.innerText = timeFormat(\n      Math.floor(videoRef.current.currentTime)\n    );\n    setTimeline(Math.floor(videoRef.current.currentTime));\n    if (videoRef.current.ended) {\n      videoRef.current.currentTime = 0;\n    }\n  };\n\n  const handleTimelineChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    videoRef.current.currentTime = value;\n  };\n\n  const timeFormat = (seconds) => {\n    // 시간 형식을 포맷하는 함수\n    return new Date(seconds * 1000).toISOString().substr(15, 4);\n  };\n\n  const getMusicInfo = async () => {\n    await localforage\n      .getItem(MUSIC_LF)\n      .then((value) => {\n        LFContext.setDuration(timeFormat(value.duration));\n        LFContext.setOriginDuration(value.duration);\n      })\n      .then(() => {\n        LFContext.setMusicLF(false);\n      });\n  };\n\n  const getImageInfo = async () => {\n    await localforage\n      .getItem(IMAGE_LF)\n      .then((value) => {\n        LFContext.setImgSrc(value.imgSrc);\n        LFContext.setName(value.name);\n      })\n      .then(() => {\n        LFContext.setImageLF(false);\n      });\n  };\n\n  const getBgInfo = async () => {\n    await localforage\n      .getItem(BG_LF)\n      .then((value) => {\n        LFContext.setBgSrc(value.bgSrc);\n      })\n      .then(() => {\n        LFContext.setBgLF(false);\n      });\n  };\n  // 새로고침 했을 때, localforage에 있는 데이터들을 Context State에 다시 저장하는 함수를 만들어보자\n  const reloadData = async () => {\n    // 1. 우선, 로컬 포리지에 값이 저장돼있을때만 작동하게 만들어야함. (로컬 포리지 DOCS를 참고해서 쓸수 있는 메서드가 있는지 알아보자.)\n    // 2. 그 다음은 그냥 getitem 해서 Context State에 값만 넣어주면 될것같음! * 캐릭터 박스에 있는 로직을 쓰면 될것같다.\n    await localforage.keys().then((res) => {\n      if (res.length === 3) {\n        getMusicInfo();\n        getImageInfo();\n        getBgInfo();\n      }\n    });\n  };\n\n  useEffect(() => {\n    const video = videoRef.current;\n    const volume = volumeRef.current;\n    reloadData();\n    if (!loading) {\n      volume.addEventListener(\"input\", handleVolumeChange);\n      video.addEventListener(\"timeupdate\", handleTimeUpdate);\n    }\n    return () => {\n      if (!loading) {\n        // Loading Reset\n        LFContext.setMusicLF(true);\n        LFContext.setImageLF(true);\n        LFContext.setBgLF(true);\n        localforage.clear();\n        video.removeEventListener(\"timeupdate\", handleTimeUpdate);\n        volume.removeEventListener(\"input\", handleVolumeChange);\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loading]);\n\n  return (\n    <>\n      <Container>\n        <Player>\n          {loading ? (\n            <Loader />\n          ) : (\n            <>\n              <BackgroundContainer bgSrc={LFContext.bgSrc} />\n              <Header>\n                <BackLink to=\"/\">\n                  <FontAwesomeIcon icon={faBars} />\n                </BackLink>\n              </Header>\n              <Avatar imgSrc={LFContext.imgSrc} />\n              <SongTitle>\n                <Title>{LFContext.name}</Title>\n              </SongTitle>\n              <SongController>\n                <TimeLineGroup>\n                  <TimeLineBox\n                    type=\"range\"\n                    step=\"1\"\n                    value={timeline}\n                    min=\"0\"\n                    max={LFContext.originduration}\n                    ref={timelineel}\n                    onChange={handleTimelineChange}\n                  />\n                  <TimeBox>\n                    <CurrentTimeBox ref={currentTime}>0:00</CurrentTimeBox>\n                    <TotalTimeBox ref={totalTime}>\n                      {LFContext.duration ? LFContext.duration : \"0:00\"}\n                    </TotalTimeBox>\n                  </TimeBox>\n                </TimeLineGroup>\n                <BottomGroup>\n                  <ButtonContainer>\n                    <BackwardButton videoRef={videoRef} />\n                    <PlayButton\n                      playMusic={playMusic}\n                      videoRef={videoRef}\n                      loading={loading}\n                    />\n                    <ForwardButton videoRef={videoRef} />\n                  </ButtonContainer>\n                  <VolumeGroup>\n                    <FontAwesomeIcon icon={faVolumeOff} />\n                    <VolumeBox\n                      type=\"range\"\n                      step=\"0.1\"\n                      value={volumeBar}\n                      min=\"0\"\n                      max=\"1\"\n                      ref={volumeRef}\n                      onChange={handleVolumeChange}\n                    />\n                    <FontAwesomeIcon icon={faVolumeUp} />\n                  </VolumeGroup>\n                </BottomGroup>\n                <Video\n                  src={srcValue}\n                  autoPlay={true}\n                  ref={videoRef}\n                  playsInline={true}\n                  muted={false}\n                />\n              </SongController>\n            </>\n          )}\n        </Player>\n      </Container>\n    </>\n  );\n};\n\nexport default MusicPlay;\n","import { initializeApp } from \"firebase/app\";\nimport { getStorage } from \"firebase/storage\";\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\n  appId: process.env.REACT_APP_APP_ID,\n};\n\nconst app = initializeApp(firebaseConfig);\n\nexport const storageService = getStorage();\n\nexport default app;\n","import React, { useContext, useState } from \"react\";\nimport styled from \"styled-components\";\nimport getBlobDuration from \"get-blob-duration\";\nimport { storageService } from \"../../fbase\";\nimport { getDownloadURL, ref, getMetadata, listAll } from \"@firebase/storage\";\nimport { Link } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlayCircle } from \"@fortawesome/free-regular-svg-icons\";\nimport localforage from \"localforage\";\nimport { AppContext } from \"../App\";\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  height: 60px;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 5px;\n  background-color: rgba(255, 255, 255, 0.5);\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.8);\n`;\n\nconst TextBox = styled.div`\n  font-size: 16px;\n  font-weight: bold;\n  margin-left: 10px;\n  cursor: default;\n`;\n\nconst AvatarImg = styled.img`\n  height: 55px;\n  width: 55px;\n  border-radius: 50%;\n`;\n\nconst Icon = styled.div`\n  font-size: 30px;\n  margin-right: 10px;\n`;\n\nconst RaidenBox = () => {\n  const MUSIC_LF = \"currentmusic\";\n  const IMAGE_LF = \"currentimage\";\n  const BG_LF = \"currentbackground\";\n\n  const [imgSrc, setImgSrc] = useState(\"\");\n  const [bgSrc, setBgSrc] = useState(\"\");\n\n  const LFContext = useContext(AppContext);\n\n  const RAIDEN = 0;\n\n  const timeFormat = (seconds) => {\n    // 시간 형식을 포맷하는 함수\n    return new Date(seconds * 1000).toISOString().substr(15, 4);\n  };\n\n  // 아바타이미지를 받아온다.\n  const getImgFile = async () => {\n    const imgRef = ref(storageService, \"images/raiden.png\");\n    const url = await getDownloadURL(imgRef);\n    const xhr = new XMLHttpRequest();\n    xhr.responseType = \"blob\";\n    xhr.onload = function (event) {\n      // eslint-disable-next-line no-unused-vars\n      const blob = xhr.response;\n    };\n    xhr.open(\"GET\", url);\n    xhr.send();\n    setImgSrc(url);\n  };\n  getImgFile(); // 이미지 받아오는 함수 호출\n\n  // 백그라운드 이미지를 받아온다.\n  const getBackGround = async () => {\n    const imgRef = ref(storageService, \"images/raidenbg.jpg\");\n    const url = await getDownloadURL(imgRef);\n    const xhr = new XMLHttpRequest();\n    xhr.responseType = \"blob\";\n    xhr.onload = function (evnet) {\n      // eslint-disable-next-line no-unused-vars\n      const blob = xhr.response;\n    };\n    xhr.open(\"GET\", url);\n    xhr.send();\n    setBgSrc(url);\n  };\n  getBackGround(); // 백그라운드 이미지 받아오기.\n\n  // 음악을 받아옵니다.\n\n  const getMusicFile = async () => {\n    // 음악 선택\n    const listRef = ref(storageService);\n    const list = await listAll(listRef);\n    const filename = list.items[RAIDEN].name; // MP3 리스트 파일이름 가져오기\n    const musicRef = ref(storageService, filename);\n    const meta = await getMetadata(musicRef); // 지금 선택된 file 레퍼런스의 메타데이터 가져오기\n    const url = await getDownloadURL(musicRef);\n    const duration = await getBlobDuration(url);\n\n    const xhr = new XMLHttpRequest();\n    // getBlobDuration 라이브러리를 통해서 blob의 재생시간을 가져옴!!\n    xhr.responseType = \"blob\";\n    xhr.onload = function (event) {\n      const blob = xhr.response;\n      // duration을 localforage에 저장했음. state에 저장해서 props로 보내려고했는데 잘 안됬다.\n      localforage\n        .setItem(MUSIC_LF, {\n          name: meta.name,\n          file: blob,\n          duration,\n        })\n        .then(async () => {\n          await localforage\n            .getItem(MUSIC_LF)\n            .then((value) => {\n              LFContext.setDuration(timeFormat(value.duration));\n              LFContext.setOriginDuration(value.duration);\n            })\n            .then(() => {\n              LFContext.setMusicLF(false);\n            });\n        });\n      localforage\n        .setItem(IMAGE_LF, {\n          imgSrc,\n          name: \"Raiden Shogun\",\n        })\n        .then(async () => {\n          await localforage\n            .getItem(IMAGE_LF)\n            .then((value) => {\n              LFContext.setImgSrc(value.imgSrc);\n              LFContext.setName(value.name);\n            })\n            .then(() => {\n              LFContext.setImageLF(false);\n            });\n        });\n      localforage\n        .setItem(BG_LF, {\n          bgSrc,\n        })\n        .then(async () => {\n          await localforage\n            .getItem(BG_LF)\n            .then((value) => {\n              LFContext.setBgSrc(value.bgSrc);\n            })\n            .then(() => {\n              LFContext.setBgLF(false);\n            });\n        });\n    };\n    xhr.open(\"GET\", url);\n    xhr.send();\n  };\n\n  return (\n    <Container>\n      <AvatarImg src={imgSrc} alt=\"Avatar\" />\n      <TextBox>Raiden Shogun</TextBox>\n      <Link\n        to={{\n          pathname: `/play`,\n        }}\n      >\n        <Icon onClick={getMusicFile}>\n          <FontAwesomeIcon icon={faPlayCircle} />\n        </Icon>\n      </Link>\n    </Container>\n  );\n};\n\nexport default RaidenBox;\n","import React, { useContext, useState } from \"react\";\nimport styled from \"styled-components\";\nimport getBlobDuration from \"get-blob-duration\";\nimport { storageService } from \"../../fbase\";\nimport { getDownloadURL, ref, getMetadata, listAll } from \"@firebase/storage\";\nimport { Link } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlayCircle } from \"@fortawesome/free-regular-svg-icons\";\nimport localforage from \"localforage\";\nimport { AppContext } from \"../App\";\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  height: 60px;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 5px;\n  background-color: rgba(255, 255, 255, 0.5);\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.8);\n`;\n\nconst TextBox = styled.div`\n  font-size: 16px;\n  font-weight: bold;\n  margin-left: 10px;\n  cursor: default;\n`;\n\nconst AvatarImg = styled.img`\n  height: 55px;\n  width: 55px;\n  border-radius: 50%;\n`;\n\nconst Icon = styled.div`\n  font-size: 30px;\n  margin-right: 10px;\n`;\n\nconst HutaoBox = () => {\n  const MUSIC_LF = \"currentmusic\";\n  const IMAGE_LF = \"currentimage\";\n  const BG_LF = \"currentbackground\";\n  const [imgSrc, setImgSrc] = useState(\"\");\n  const [bgSrc, setBgSrc] = useState(\"\");\n\n  const LFContext = useContext(AppContext);\n\n  const HUTAO = 1;\n\n  const timeFormat = (seconds) => {\n    // 시간 형식을 포맷하는 함수\n    return new Date(seconds * 1000).toISOString().substr(15, 4);\n  };\n\n  // 아바타이미지를 받아온다.\n  const getImgFile = async () => {\n    const imgRef = ref(storageService, \"images/hutao_avatar.png\");\n    const url = await getDownloadURL(imgRef);\n    const xhr = new XMLHttpRequest();\n    xhr.responseType = \"blob\";\n    xhr.onload = function (event) {\n      // eslint-disable-next-line no-unused-vars\n      const blob = xhr.response;\n    };\n    xhr.open(\"GET\", url);\n    xhr.send();\n    setImgSrc(url);\n  };\n  getImgFile(); // 이미지 받아오는 함수 호출\n\n  // 백그라운드 이미지를 받아온다.\n  const getBackGround = async () => {\n    const imgRef = ref(storageService, \"images/hutaobg.jpg\");\n    const url = await getDownloadURL(imgRef);\n    const xhr = new XMLHttpRequest();\n    xhr.responseType = \"blob\";\n    xhr.onload = function (evnet) {\n      // eslint-disable-next-line no-unused-vars\n      const blob = xhr.response;\n    };\n    xhr.open(\"GET\", url);\n    xhr.send();\n    setBgSrc(url);\n  };\n  getBackGround(); // 백그라운드 이미지 받아오기.\n\n  // 음악을 받아옵니다.\n\n  const getMusicFile = async () => {\n    // 음악 선택\n    const listRef = ref(storageService);\n    const list = await listAll(listRef);\n    const filename = list.items[HUTAO].name; // 파일이름 가져오기\n    const musicRef = ref(storageService, filename);\n    const meta = await getMetadata(musicRef); // 지금 선택된 file 레퍼런스의 메타데이터 가져오기\n    const url = await getDownloadURL(musicRef);\n    const duration = await getBlobDuration(url);\n\n    const xhr = new XMLHttpRequest();\n    // getBlobDuration 라이브러리를 통해서 blob의 재생시간을 가져옴!!\n    xhr.responseType = \"blob\";\n    xhr.onload = function (event) {\n      const blob = xhr.response;\n      localforage\n        .setItem(MUSIC_LF, {\n          name: meta.name,\n          file: blob,\n          duration,\n        })\n        .then(async () => {\n          await localforage\n            .getItem(MUSIC_LF)\n            .then((value) => {\n              LFContext.setDuration(timeFormat(value.duration));\n              LFContext.setOriginDuration(value.duration);\n            })\n            .then(() => {\n              LFContext.setMusicLF(false);\n            });\n        });\n      localforage\n        .setItem(IMAGE_LF, {\n          imgSrc,\n          name: \"Hutao\",\n        })\n        .then(async () => {\n          await localforage\n            .getItem(IMAGE_LF)\n            .then((value) => {\n              LFContext.setImgSrc(value.imgSrc);\n              LFContext.setName(value.name);\n            })\n            .then(() => {\n              LFContext.setImageLF(false);\n            });\n        });\n      localforage\n        .setItem(BG_LF, {\n          bgSrc,\n        })\n        .then(async () => {\n          await localforage\n            .getItem(BG_LF)\n            .then((value) => {\n              LFContext.setBgSrc(value.bgSrc);\n            })\n            .then(() => {\n              LFContext.setBgLF(false);\n            });\n        });\n    };\n    xhr.open(\"GET\", url);\n    xhr.send();\n  };\n\n  return (\n    <Container>\n      <AvatarImg src={imgSrc} alt=\"Avatar\" />\n      <TextBox>Hutao</TextBox>\n      <Link\n        to={{\n          pathname: `/play`,\n        }}\n      >\n        <Icon onClick={getMusicFile}>\n          <FontAwesomeIcon icon={faPlayCircle} />\n        </Icon>\n      </Link>\n    </Container>\n  );\n};\n\nexport default HutaoBox;\n","import React, { useContext, useState } from \"react\";\nimport styled from \"styled-components\";\nimport getBlobDuration from \"get-blob-duration\";\nimport { storageService } from \"../../fbase\";\nimport { getDownloadURL, ref, getMetadata, listAll } from \"@firebase/storage\";\nimport { Link } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlayCircle } from \"@fortawesome/free-regular-svg-icons\";\nimport localforage from \"localforage\";\nimport { AppContext } from \"../App\";\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  height: 60px;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 5px;\n  background-color: rgba(255, 255, 255, 0.5);\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.8);\n`;\n\nconst TextBox = styled.div`\n  font-size: 16px;\n  font-weight: bold;\n  margin-left: 10px;\n  cursor: default;\n`;\n\nconst AvatarImg = styled.img`\n  height: 55px;\n  width: 55px;\n  border-radius: 50%;\n`;\n\nconst Icon = styled.div`\n  font-size: 30px;\n  margin-right: 10px;\n`;\n\nconst KazuhaBox = () => {\n  const MUSIC_LF = \"currentmusic\";\n  const IMAGE_LF = \"currentimage\";\n  const BG_LF = \"currentbackground\";\n  const [imgSrc, setImgSrc] = useState(\"\");\n  const [bgSrc, setBgSrc] = useState(\"\");\n\n  const KAZUHA = 2;\n\n  const LFContext = useContext(AppContext);\n\n  const timeFormat = (seconds) => {\n    // 시간 형식을 포맷하는 함수\n    return new Date(seconds * 1000).toISOString().substr(15, 4);\n  };\n\n  // 아바타이미지를 받아온다.\n  const getImgFile = async () => {\n    const imgRef = ref(storageService, \"images/kazuha.png\");\n    const url = await getDownloadURL(imgRef);\n    const xhr = new XMLHttpRequest();\n    xhr.responseType = \"blob\";\n    xhr.onload = function (event) {\n      // eslint-disable-next-line no-unused-vars\n      const blob = xhr.response;\n    };\n    xhr.open(\"GET\", url);\n    xhr.send();\n    setImgSrc(url);\n  };\n  getImgFile(); // 이미지 받아오는 함수 호출\n\n  // 백그라운드 이미지를 받아온다.\n  const getBackGround = async () => {\n    const imgRef = ref(storageService, \"images/kazuhabg.jpg\");\n    const url = await getDownloadURL(imgRef);\n    const xhr = new XMLHttpRequest();\n    xhr.responseType = \"blob\";\n    xhr.onload = function (evnet) {\n      // eslint-disable-next-line no-unused-vars\n      const blob = xhr.response;\n    };\n    xhr.open(\"GET\", url);\n    xhr.send();\n    setBgSrc(url);\n  };\n  getBackGround(); // 백그라운드 이미지 받아오기.\n\n  // 음악을 받아옵니다.\n\n  const getMusicFile = async () => {\n    // 음악 선택\n    const listRef = ref(storageService);\n    const list = await listAll(listRef);\n    const filename = list.items[KAZUHA].name; // 파일이름 가져오기\n    const musicRef = ref(storageService, filename);\n    const meta = await getMetadata(musicRef); // 지금 선택된 file 레퍼런스의 메타데이터 가져오기\n    const url = await getDownloadURL(musicRef);\n    const duration = await getBlobDuration(url);\n\n    const xhr = new XMLHttpRequest();\n    // getBlobDuration 라이브러리를 통해서 blob의 재생시간을 가져옴!!\n    xhr.responseType = \"blob\";\n    xhr.onload = function (event) {\n      const blob = xhr.response;\n      localforage\n        .setItem(MUSIC_LF, {\n          name: meta.name,\n          file: blob,\n          duration,\n        })\n        .then(async () => {\n          await localforage\n            .getItem(MUSIC_LF)\n            .then((value) => {\n              LFContext.setDuration(timeFormat(value.duration));\n              LFContext.setOriginDuration(value.duration);\n            })\n            .then(() => {\n              LFContext.setMusicLF(false);\n            });\n        });\n      localforage\n        .setItem(IMAGE_LF, {\n          imgSrc,\n          name: \"Kazuha\",\n        })\n        .then(async () => {\n          await localforage\n            .getItem(IMAGE_LF)\n            .then((value) => {\n              LFContext.setImgSrc(value.imgSrc);\n              LFContext.setName(value.name);\n            })\n            .then(() => {\n              LFContext.setImageLF(false);\n            });\n        });\n      localforage\n        .setItem(BG_LF, {\n          bgSrc,\n        })\n        .then(async () => {\n          await localforage\n            .getItem(BG_LF)\n            .then((value) => {\n              LFContext.setBgSrc(value.bgSrc);\n            })\n            .then(() => {\n              LFContext.setBgLF(false);\n            });\n        });\n    };\n    xhr.open(\"GET\", url);\n    xhr.send();\n  };\n\n  return (\n    <Container>\n      <AvatarImg src={imgSrc} alt=\"Avatar\" />\n      <TextBox>Kazuha</TextBox>\n      <Link\n        to={{\n          pathname: `/play`,\n        }}\n      >\n        <Icon onClick={getMusicFile}>\n          <FontAwesomeIcon icon={faPlayCircle} />\n        </Icon>\n      </Link>\n    </Container>\n  );\n};\n\nexport default KazuhaBox;\n","import React, { useContext, useState } from \"react\";\nimport styled from \"styled-components\";\nimport getBlobDuration from \"get-blob-duration\";\nimport { storageService } from \"../../fbase\";\nimport { getDownloadURL, ref, getMetadata, listAll } from \"@firebase/storage\";\nimport { Link } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlayCircle } from \"@fortawesome/free-regular-svg-icons\";\nimport localforage from \"localforage\";\nimport { AppContext } from \"../App\";\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  height: 60px;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 5px;\n  background-color: rgba(255, 255, 255, 0.5);\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.8);\n`;\n\nconst TextBox = styled.div`\n  font-size: 16px;\n  font-weight: bold;\n  margin-left: 10px;\n  cursor: default;\n`;\n\nconst AvatarImg = styled.img`\n  height: 55px;\n  width: 55px;\n  border-radius: 50%;\n`;\n\nconst Icon = styled.div`\n  font-size: 30px;\n  margin-right: 10px;\n`;\n\nconst KleeBox = () => {\n  const MUSIC_LF = \"currentmusic\";\n  const IMAGE_LF = \"currentimage\";\n  const BG_LF = \"currentbackground\";\n  const [imgSrc, setImgSrc] = useState(\"\");\n  const [bgSrc, setBgSrc] = useState(\"\");\n\n  const KLEE = 3;\n\n  const LFContext = useContext(AppContext);\n\n  const timeFormat = (seconds) => {\n    // 시간 형식을 포맷하는 함수\n    return new Date(seconds * 1000).toISOString().substr(15, 4);\n  };\n\n  // 아바타이미지를 받아온다.\n  const getImgFile = async () => {\n    const imgRef = ref(storageService, \"images/klee.png\");\n    const url = await getDownloadURL(imgRef);\n    const xhr = new XMLHttpRequest();\n    xhr.responseType = \"blob\";\n    xhr.onload = function (event) {\n      // eslint-disable-next-line no-unused-vars\n      const blob = xhr.response;\n    };\n    xhr.open(\"GET\", url);\n    xhr.send();\n    setImgSrc(url);\n  };\n  getImgFile(); // 이미지 받아오는 함수 호출\n\n  // 백그라운드 이미지를 받아온다.\n  const getBackGround = async () => {\n    const imgRef = ref(storageService, \"images/kleebg.jpg\");\n    const url = await getDownloadURL(imgRef);\n    const xhr = new XMLHttpRequest();\n    xhr.responseType = \"blob\";\n    xhr.onload = function (evnet) {\n      // eslint-disable-next-line no-unused-vars\n      const blob = xhr.response;\n    };\n    xhr.open(\"GET\", url);\n    xhr.send();\n    setBgSrc(url);\n  };\n  getBackGround(); // 백그라운드 이미지 받아오기.\n\n  // 음악을 받아옵니다.\n\n  const getMusicFile = async () => {\n    // 음악 선택\n    const listRef = ref(storageService);\n    const list = await listAll(listRef);\n    const filename = list.items[KLEE].name; // 파일이름 가져오기\n    const musicRef = ref(storageService, filename);\n    const meta = await getMetadata(musicRef); // 지금 선택된 file 레퍼런스의 메타데이터 가져오기\n    const url = await getDownloadURL(musicRef);\n    const duration = await getBlobDuration(url);\n\n    const xhr = new XMLHttpRequest();\n    // getBlobDuration 라이브러리를 통해서 blob의 재생시간을 가져옴!!\n    xhr.responseType = \"blob\";\n    xhr.onload = function (event) {\n      const blob = xhr.response;\n      localforage\n        .setItem(MUSIC_LF, {\n          name: meta.name,\n          file: blob,\n          duration,\n        })\n        .then(async () => {\n          await localforage\n            .getItem(MUSIC_LF)\n            .then((value) => {\n              LFContext.setDuration(timeFormat(value.duration));\n              LFContext.setOriginDuration(value.duration);\n            })\n            .then(() => {\n              LFContext.setMusicLF(false);\n            });\n        });\n      localforage\n        .setItem(IMAGE_LF, {\n          imgSrc,\n          name: \"Klee\",\n        })\n        .then(async () => {\n          await localforage\n            .getItem(IMAGE_LF)\n            .then((value) => {\n              LFContext.setImgSrc(value.imgSrc);\n              LFContext.setName(value.name);\n            })\n            .then(() => {\n              LFContext.setImageLF(false);\n            });\n        });\n      localforage\n        .setItem(BG_LF, {\n          bgSrc,\n        })\n        .then(async () => {\n          await localforage\n            .getItem(BG_LF)\n            .then((value) => {\n              LFContext.setBgSrc(value.bgSrc);\n            })\n            .then(() => {\n              LFContext.setBgLF(false);\n            });\n        });\n    };\n    xhr.open(\"GET\", url);\n    xhr.send();\n  };\n\n  return (\n    <Container>\n      <AvatarImg src={imgSrc} alt=\"Avatar\" />\n      <TextBox>Klee</TextBox>\n      <Link\n        to={{\n          pathname: `/play`,\n        }}\n      >\n        <Icon onClick={getMusicFile}>\n          <FontAwesomeIcon icon={faPlayCircle} />\n        </Icon>\n      </Link>\n    </Container>\n  );\n};\n\nexport default KleeBox;\n","import React, { useContext, useState } from \"react\";\nimport styled from \"styled-components\";\nimport getBlobDuration from \"get-blob-duration\";\nimport { storageService } from \"../../fbase\";\nimport { getDownloadURL, ref, getMetadata, listAll } from \"@firebase/storage\";\nimport { Link } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlayCircle } from \"@fortawesome/free-regular-svg-icons\";\nimport localforage from \"localforage\";\nimport { AppContext } from \"../App\";\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  height: 60px;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 5px;\n  background-color: rgba(255, 255, 255, 0.5);\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.8);\n`;\n\nconst TextBox = styled.div`\n  font-size: 16px;\n  font-weight: bold;\n  margin-left: 10px;\n  cursor: default;\n`;\n\nconst AvatarImg = styled.img`\n  height: 55px;\n  width: 55px;\n  border-radius: 50%;\n`;\n\nconst Icon = styled.div`\n  font-size: 30px;\n  margin-right: 10px;\n`;\n\nconst AyakaBox = () => {\n  const MUSIC_LF = \"currentmusic\";\n  const IMAGE_LF = \"currentimage\";\n  const BG_LF = \"currentbackground\";\n  const [imgSrc, setImgSrc] = useState(\"\");\n  const [bgSrc, setBgSrc] = useState(\"\");\n\n  const AYAKA = 4;\n\n  const LFContext = useContext(AppContext);\n\n  const timeFormat = (seconds) => {\n    // 시간 형식을 포맷하는 함수\n    return new Date(seconds * 1000).toISOString().substr(15, 4);\n  };\n\n  // 아바타이미지를 받아온다.\n  const getImgFile = async () => {\n    const imgRef = ref(storageService, \"images/ayaka.png\");\n    const url = await getDownloadURL(imgRef);\n    const xhr = new XMLHttpRequest();\n    xhr.responseType = \"blob\";\n    xhr.onload = function (event) {\n      // eslint-disable-next-line no-unused-vars\n      const blob = xhr.response;\n    };\n    xhr.open(\"GET\", url);\n    xhr.send();\n    setImgSrc(url);\n  };\n  getImgFile(); // 이미지 받아오는 함수 호출\n\n  // 백그라운드 이미지를 받아온다.\n  const getBackGround = async () => {\n    const imgRef = ref(storageService, \"images/ayakabg.jpg\");\n    const url = await getDownloadURL(imgRef);\n    const xhr = new XMLHttpRequest();\n    xhr.responseType = \"blob\";\n    xhr.onload = function (evnet) {\n      // eslint-disable-next-line no-unused-vars\n      const blob = xhr.response;\n    };\n    xhr.open(\"GET\", url);\n    xhr.send();\n    setBgSrc(url);\n  };\n  getBackGround(); // 백그라운드 이미지 받아오기.\n\n  // 음악을 받아옵니다.\n\n  const getMusicFile = async () => {\n    // 음악 선택\n    const listRef = ref(storageService);\n    const list = await listAll(listRef);\n    const filename = list.items[AYAKA].name; // 파일이름 가져오기\n    const musicRef = ref(storageService, filename);\n    const meta = await getMetadata(musicRef); // 지금 선택된 file 레퍼런스의 메타데이터 가져오기\n    const url = await getDownloadURL(musicRef);\n    const duration = await getBlobDuration(url);\n\n    const xhr = new XMLHttpRequest();\n    // getBlobDuration 라이브러리를 통해서 blob의 재생시간을 가져옴!!\n    xhr.responseType = \"blob\";\n    xhr.onload = function (event) {\n      const blob = xhr.response;\n      localforage\n        .setItem(MUSIC_LF, {\n          name: meta.name,\n          file: blob,\n          duration,\n        })\n        .then(async () => {\n          await localforage\n            .getItem(MUSIC_LF)\n            .then((value) => {\n              LFContext.setDuration(timeFormat(value.duration));\n              LFContext.setOriginDuration(value.duration);\n            })\n            .then(() => {\n              LFContext.setMusicLF(false);\n            });\n        });\n      localforage\n        .setItem(IMAGE_LF, {\n          imgSrc,\n          name: \"Ayaka\",\n        })\n        .then(async () => {\n          await localforage\n            .getItem(IMAGE_LF)\n            .then((value) => {\n              LFContext.setImgSrc(value.imgSrc);\n              LFContext.setName(value.name);\n            })\n            .then(() => {\n              LFContext.setImageLF(false);\n            });\n        });\n      localforage\n        .setItem(BG_LF, {\n          bgSrc,\n        })\n        .then(async () => {\n          await localforage\n            .getItem(BG_LF)\n            .then((value) => {\n              LFContext.setBgSrc(value.bgSrc);\n            })\n            .then(() => {\n              LFContext.setBgLF(false);\n            });\n        });\n    };\n    xhr.open(\"GET\", url);\n    xhr.send();\n  };\n\n  return (\n    <Container>\n      <AvatarImg src={imgSrc} alt=\"Avatar\" />\n      <TextBox>Ayaka</TextBox>\n      <Link\n        to={{\n          pathname: `/play`,\n        }}\n      >\n        <Icon onClick={getMusicFile}>\n          <FontAwesomeIcon icon={faPlayCircle} />\n        </Icon>\n      </Link>\n    </Container>\n  );\n};\n\nexport default AyakaBox;\n","import React, { useContext, useState } from \"react\";\nimport styled from \"styled-components\";\nimport getBlobDuration from \"get-blob-duration\";\nimport { storageService } from \"../../fbase\";\nimport { getDownloadURL, ref, getMetadata, listAll } from \"@firebase/storage\";\nimport { Link } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlayCircle } from \"@fortawesome/free-regular-svg-icons\";\nimport localforage from \"localforage\";\nimport { AppContext } from \"../App\";\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  height: 60px;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 5px;\n  background-color: rgba(255, 255, 255, 0.5);\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.8);\n`;\n\nconst TextBox = styled.div`\n  font-size: 16px;\n  font-weight: bold;\n  margin-left: 10px;\n  cursor: default;\n`;\n\nconst AvatarImg = styled.img`\n  height: 55px;\n  width: 55px;\n  border-radius: 50%;\n`;\n\nconst Icon = styled.div`\n  font-size: 30px;\n  margin-right: 10px;\n`;\n\nconst GanyuBox = () => {\n  const MUSIC_LF = \"currentmusic\";\n  const IMAGE_LF = \"currentimage\";\n  const BG_LF = \"currentbackground\";\n  const [imgSrc, setImgSrc] = useState(\"\");\n  const [bgSrc, setBgSrc] = useState(\"\");\n\n  const GANYU = 5;\n\n  const LFContext = useContext(AppContext);\n\n  const timeFormat = (seconds) => {\n    // 시간 형식을 포맷하는 함수\n    return new Date(seconds * 1000).toISOString().substr(15, 4);\n  };\n\n  // 아바타이미지를 받아온다.\n  const getImgFile = async () => {\n    const imgRef = ref(storageService, \"images/ganyu.png\");\n    const url = await getDownloadURL(imgRef);\n    const xhr = new XMLHttpRequest();\n    xhr.responseType = \"blob\";\n    xhr.onload = function (event) {\n      // eslint-disable-next-line no-unused-vars\n      const blob = xhr.response;\n    };\n    xhr.open(\"GET\", url);\n    xhr.send();\n    setImgSrc(url);\n  };\n  getImgFile(); // 이미지 받아오는 함수 호출\n\n  // 백그라운드 이미지를 받아온다.\n  const getBackGround = async () => {\n    const imgRef = ref(storageService, \"images/ganyubg.jpg\");\n    const url = await getDownloadURL(imgRef);\n    const xhr = new XMLHttpRequest();\n    xhr.responseType = \"blob\";\n    xhr.onload = function (evnet) {\n      // eslint-disable-next-line no-unused-vars\n      const blob = xhr.response;\n    };\n    xhr.open(\"GET\", url);\n    xhr.send();\n    setBgSrc(url);\n  };\n  getBackGround(); // 백그라운드 이미지 받아오기.\n\n  // 음악을 받아옵니다.\n\n  const getMusicFile = async () => {\n    // 음악 선택\n    const listRef = ref(storageService);\n    const list = await listAll(listRef);\n    const filename = list.items[GANYU].name; // 파일이름 가져오기\n    const musicRef = ref(storageService, filename);\n    const meta = await getMetadata(musicRef); // 지금 선택된 file 레퍼런스의 메타데이터 가져오기\n    const url = await getDownloadURL(musicRef);\n    const duration = await getBlobDuration(url);\n\n    const xhr = new XMLHttpRequest();\n    // getBlobDuration 라이브러리를 통해서 blob의 재생시간을 가져옴!!\n    xhr.responseType = \"blob\";\n    xhr.onload = function (event) {\n      const blob = xhr.response;\n      localforage\n        .setItem(MUSIC_LF, {\n          name: meta.name,\n          file: blob,\n          duration,\n        })\n        .then(async () => {\n          await localforage\n            .getItem(MUSIC_LF)\n            .then((value) => {\n              LFContext.setDuration(timeFormat(value.duration));\n              LFContext.setOriginDuration(value.duration);\n            })\n            .then(() => {\n              LFContext.setMusicLF(false);\n            });\n        });\n      localforage\n        .setItem(IMAGE_LF, {\n          imgSrc,\n          name: \"Ganyu\",\n        })\n        .then(async () => {\n          await localforage\n            .getItem(IMAGE_LF)\n            .then((value) => {\n              LFContext.setImgSrc(value.imgSrc);\n              LFContext.setName(value.name);\n            })\n            .then(() => {\n              LFContext.setImageLF(false);\n            });\n        });\n      localforage\n        .setItem(BG_LF, {\n          bgSrc,\n        })\n        .then(async () => {\n          await localforage\n            .getItem(BG_LF)\n            .then((value) => {\n              LFContext.setBgSrc(value.bgSrc);\n            })\n            .then(() => {\n              LFContext.setBgLF(false);\n            });\n        });\n    };\n    xhr.open(\"GET\", url);\n    xhr.send();\n  };\n\n  return (\n    <Container>\n      <AvatarImg src={imgSrc} alt=\"Avatar\" />\n      <TextBox>Ganyu</TextBox>\n      <Link\n        to={{\n          pathname: `/play`,\n        }}\n      >\n        <Icon onClick={getMusicFile}>\n          <FontAwesomeIcon icon={faPlayCircle} />\n        </Icon>\n      </Link>\n    </Container>\n  );\n};\n\nexport default GanyuBox;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Header from \"../components/common/Header\";\nimport RaidenBox from \"../components/Characters/RaidenBox\";\nimport HutaoBox from \"../components/Characters/HutaoBox\";\nimport KazuhaBox from \"../components/Characters/KazuhaBox\";\nimport KleeBox from \"../components/Characters/KleeBox\";\nimport AyakaBox from \"../components/Characters/AyakaBox\";\nimport GanyuBox from \"../components/Characters/GanyuBox\";\n\nconst Container = styled.div`\n  display: flex;\n  height: 100vh;\n  align-items: center;\n`;\n\nconst Player = styled.div`\n  position: relative;\n  margin: 0 auto;\n  /* transform: translateY(50%); */\n  background: rgb(238, 174, 202);\n  background: linear-gradient(\n    rgba(238, 174, 202, 1) 0%,\n    rgba(148, 187, 233, 1) 100%\n  );\n  width: 300px;\n  height: 500px;\n  border-radius: 15px;\n  border: 1px solid black;\n`;\n\nconst Title = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  font-family: \"Ceviche One\", cursive;\n  font-size: 30px;\n`;\n\nconst ListBox = styled.div`\n  margin: 0 auto;\n  margin-top: 20px;\n  width: 90%;\n  height: 400px;\n  border: 1px solid black;\n  border-radius: 6px;\n  overflow-y: scroll;\n  font-family: \"Fredoka One\", cursive;\n  &::-webkit-scrollbar {\n    height: 8px;\n    width: 5px;\n    border-radius: 6px;\n    background: rgba(0, 0, 0, 0.8);\n  }\n  &::-webkit-scrollbar-thumb {\n    background-color: rgba(255, 255, 255, 0.4);\n    border-radius: 6px;\n  }\n`;\n\nconst MusicList = () => {\n  return (\n    <Container>\n      <Player>\n        <Header>\n          <Title>\n            <span>Genshin Music</span>\n          </Title>\n        </Header>\n        <ListBox>\n          <RaidenBox />\n          <HutaoBox />\n          <KazuhaBox />\n          <KleeBox />\n          <AyakaBox />\n          <GanyuBox />\n        </ListBox>\n      </Player>\n    </Container>\n  );\n};\n\nexport default MusicList;\n","import React, { useState } from \"react\";\nimport GlobalStyles from \"./GlobalStyles\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport MusicPlay from \"../routes/MusicPlay\";\nimport MusicList from \"../routes/MusicList\";\n\nexport const AppContext = React.createContext();\n\nconst App = () => {\n  const [musicLF, setMusicLF] = useState(true);\n  const [imageLF, setImageLF] = useState(true);\n  const [bgLF, setBgLF] = useState(true);\n\n  const [duration, setDuration] = useState(null);\n  const [originduration, setOriginDuration] = useState(null);\n  const [name, setName] = useState(\"\");\n  const [imgSrc, setImgSrc] = useState(null);\n  const [bgSrc, setBgSrc] = useState(null);\n\n  return (\n    <>\n      <AppContext.Provider\n        value={{\n          musicLF,\n          imageLF,\n          bgLF,\n          setMusicLF,\n          setImageLF,\n          setBgLF,\n          duration,\n          setDuration,\n          originduration,\n          setOriginDuration,\n          name,\n          setName,\n          bgSrc,\n          setBgSrc,\n          imgSrc,\n          setImgSrc,\n        }}\n      >\n        <GlobalStyles />\n        <HashRouter>\n          <Route path=\"/\" exact component={MusicList} />\n          <Route path=\"/play\" component={MusicPlay} />\n        </HashRouter>\n      </AppContext.Provider>\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App.js\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}